
#include <stdio.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h> //pour les bool√©ens

#define S "0"//reSet color
#define L "1"//add light to the color
#define D "2"//assombrie les caract√®re
#define E "22"//anule les effet L et D
#define V "31"//rouge car R est d√©ja pris
#define G "32"//vert 
#define Y "33"//jaune
#define B "34"//bleu 
#define M "35"//magenta
#define C "36"//cyan
#define W "37"//blanc

#define PCOLOR(X) "\x1b["X"m"    //macro pour ajouter la couleur facilement, le X est l'emplacement du code couleur, au forma "nombre"
typedef struct case_tableau {
    char caractere;
    bool variable;
    int TAILLE;
    int different;
    int taille;
} case_tableau;


typedef struct {
char player[50];
long score;
} Score;

Score score;







void Affichage(case_tableau tab[][20], int taille) {
    int i, j, k, l;
    
    for (i = 0; i < taille; i++) {
        printf("\n \n");
        
        for (l = 0; l < taille; l++) {
            if (l == taille - 1) {
                printf("+---+\n"); // Ligne de fin de s√©paration
                break;
            } else {
                printf("+---"); // Ligne √† multiplier de s√©paration
            }
        }
        
        for (k = 0; k < taille; k++) {
            if (tab[i][k].variable == 1) {
                printf("|");
                printf("\x1b[31m O ");
                printf(PCOLOR("%d"), 0);
            } else if (tab[i][k].caractere == 'A') {
                printf("|");
                printf("\x1b[32m A ");
                printf(PCOLOR("%d"), 0);
            } else if (tab[i][k].caractere == 'B') {
                printf("|");
                printf("\x1b[33m B ");
                printf(PCOLOR("%d"), 0);
            } else if (tab[i][k].caractere == 'C') {
                printf("|");
                printf("\x1b[34m C ");
                printf(PCOLOR("%d"), 0);
            } else if (tab[i][k].caractere == 'D') {
                printf("|");
                printf("\x1b[35m D ");
                printf(PCOLOR("%d"), 0);
            } else if (tab[i][k].caractere == 'E') {
                printf("|");
                printf("\x1b[36m E ");
                printf(PCOLOR("%d"), 0);
            } else if (tab[i][k].caractere == 'F') {
                printf("|");
                printf("\x1b[37m F ");
                printf(PCOLOR("%d"), 0);
            }
        }
        printf("|"); // Barre de fin
    }
    
    printf("\n");
    
    for (l = 0; l < taille; l++) {
        if (l == taille - 1) {
            printf("+---+\n"); // Ligne de fin de s√©paration
        } 
        else {
            printf("+---"); // Ligne √† multiplier de s√©paration
        }
    }
}



void Affichagemoji(case_tableau tab[][20],int taille){ // Affichage du tableau √† modifier pendant la s√©ance d'info
    int i,j,k,l,m;
        for(i=0;i<taille;i++){
            printf("\n \n");
            if(i==0){
                for(m=0;m<taille;m++){        //affichage des chiffres en hauteur
                    printf("   %d.",m);
                }
                printf("\n ");      
            }
            else{
            printf(" ");
            }
            for (l = 0; l < taille; l++) {
                if (l == taille - 1) {
                    printf("+----+\n"); // Ligne de fin de s√©paration
                }
                else {
                printf("+----"); // Ligne √† multiplier de s√©paration
                }
            }
                for(k=0;k<taille;k++){
                    if(k==0){
                printf("%d",i);   
            }
            if(tab[i][k].variable==1){
                printf("|");
                printf("\x1b[31m O ");
                printf(PCOLOR("%d"),0);
                
            }
            else if(tab[i][k].caractere=='A'){
                printf("|");
                printf(" üçê ");
                
            }
            else if(tab[i][k].caractere=='B'){
                printf("|");
                printf(" üçâ ");
            }
            else if(tab[i][k].caractere=='C'){
                printf("|");
                printf(" ü•ù ");
                
            }
            else if(tab[i][k].caractere=='D'){
                printf("|");
                printf(" üçá ");
                
            }
            else if(tab[i][k].caractere=='E'){
                printf("|");
                printf(" üßÅ ");
                printf(PCOLOR("%d"),0);
            }
            else if(tab[i][k].caractere=='F'){
                printf("|");
                printf(" ü•ï ");
                printf(PCOLOR("%d"),0);
            }
        }
        printf("|"); // Barre de fin
    } 
    printf("\n");
    printf(" ");
    for (l = 0; l < taille; l++) {
        if (l == taille - 1) {
            printf("+----+\n"); // Ligne de fin de s√©paration
        } 
        else{
            printf("+----"); // Ligne √† multiplier de s√©paration
        }
    }
}

bool detecteMarque(case_tableau tab[][20],int taille,bool veriftot) {
    int ol, oc; // optimisation fin du k en ligne et colonne
    bool verif = 0;
    veriftot = 0; // bool√©en pour v√©rifier qu'il ne reste aucune ligne ou colonne de 3 ou plus
    int i, j, k, l, m, o;
    
    for (int i = 0; i < taille; i++) {
        ol=taille;
        for (int j = 0; j < ol; j++) {
            if(j==0){
                oc=taille;
                int compteur = 1; // initialisation des compteurs √† 1
                int compteurinf=1;
                while (compteur < taille && tab[i][compteur].caractere == tab[i][j].caractere) {
                compteur++; // compter le nombre d'√©l√©ments √©gaux vers la droite
                }
                while (taille-compteurinf >=0 && tab[i][taille - compteurinf].caractere == tab[i][0].caractere) {
                compteurinf++; // compter le nombre d'√©l√©ments √©gaux vers la droite
                }
                if (compteur >= 3&&compteurinf<=1) { // si on a trouv√© une s√©rie d'au moins 3 √©l√©ments √©gaux
                    for (int k = 0; k < compteur; k++) {
                        tab[i][k].variable=1; // remplacer les √©l√©ments par des "O"
                    }
                    veriftot=1;
                }
                if ((compteurinf >= 3&&compteur<=1)){
                    tab[i][0].variable=1; // remplacer du premier √©l√©ments par un "O"
                    for (int k = taille+1-compteurinf; k < taille ; k++) {
                        tab[i][k].variable=1; // remplacer les √©l√©ments par des "O"
                    }
                    ol=taille-compteurinf; //optimisation fin de ligne
                    veriftot=1;
                }
                if (compteurinf+compteur>=4&&compteur>=1&&compteurinf>=1){
                    for (int k = 0; k < compteur; k++) {
                        tab[i][k].variable=1; // remplacer les √©l√©ments par des "O"
                    }
                    for (int k = taille + 1 - compteurinf; k<taille ; k++) {
                        tab[i][k].variable=1; // remplacer les √©l√©ments par des "O"
                    }
                    ol=taille-compteurinf; //optimisation fin de ligne
                    veriftot=1;
                }
            }
            if(i==0){
                int compteur = 1; // r√©initialisation des compteurs √† 1
                int compteurinf=1; 
                while (taille-compteurinf >=0 && tab[taille - compteurinf][j].caractere == tab[i][j].caractere) {
                compteurinf++; // compter le nombre d'√©l√©ments √©gaux vers la droite
                }
                while (compteur < taille && tab[i + compteur][j].caractere == tab[i][j].caractere) {
                    compteur++; // compter le nombre d'√©l√©ments √©gaux vers le bas
                }
                if (compteur >= 3&&compteurinf==1) { // si on a trouv√© une s√©rie d'au moins 3 √©l√©ments √©gaux
                    for (int k = 0; k < compteur; k++) {
                        tab[k][j].variable=1; // remplacer les √©l√©ments par des "O"
                        veriftot=1;
                        
                    }
                }
                if (compteurinf >= 3&&compteur==1){
                    tab[0][j].variable=1; // remplacer du premier √©l√©ments par un "O"
                    for (int k = taille+1-compteurinf; k <taille ; k++) {
                        tab[k][j].variable=1; // remplacer les √©l√©ments par des "O"
                        veriftot=1;
                        
                    }
                oc=taille-compteurinf;
                }
                if (compteurinf+compteur>=4&&compteur!=1&&compteurinf!=1){
                    for (int k = 0; k < compteur; k++) {
                        tab[k][j].variable=1; // remplacer les √©l√©ments par des "O"
                    }
                    for (int k = taille+1 -compteurinf; k < taille; k++) {
                        tab[k][j].variable=1; // remplacer les √©l√©ments par des "O"
                       
                    }
                oc=taille-compteurinf; //optimisation fin de ligne
                veriftot=1;
                }
            }
            int compteur = 1; // initialisation du compteur √† 1
            while (j + compteur < taille && tab[i][j + compteur].caractere == tab[i][j].caractere) {
                compteur++; // compter le nombre d'√©l√©ments √©gaux vers la droite
            }
            if (compteur >= 3) { // si on a trouv√© une s√©rie d'au moins 3 √©l√©ments √©gaux
                for (int k = 0; k < compteur; k++) {
                    tab[i][j+k].variable=1; // remplacer les √©l√©ments par des "O"
                }
            }
            compteur = 1; // r√©initialisation du compteur √† 1
            while (i + compteur < taille && tab[i + compteur][j].caractere == tab[i][j].caractere) {
                compteur++; // compter le nombre d'√©l√©ments √©gaux vers le bas
            }
            if (compteur >= 3) { // si on a trouv√© une s√©rie d'au moins 3 √©l√©ments √©gaux
                for (int k = 0; k < compteur; k++) {
                    tab[i+k][j].variable=1; // remplacer les √©l√©ments par des "O"
                }
            }
        
        
        
            for (int j = 0; j < taille; j++) {
                int compteur = 1; // initialisation du compteur √† 1
                while (j + compteur < taille && tab[i][j + compteur].caractere == tab[i][j].caractere) {
                    compteur++; // compter le nombre d'√©l√©ments √©gaux vers la droite
                }
                if (compteur >= 3) { // si on a trouv√© une s√©rie d'au moins 3 √©l√©ments √©gaux
                    for (int k = 0; k < compteur; k++) {
                        tab[i][j+k].variable=1; // remplacer les √©l√©ments par des "O"
                    }
                    veriftot=1;
                }
                compteur = 1; // r√©initialisation du compteur √† 1
                while (i + compteur < taille && tab[i + compteur][j].caractere == tab[i][j].caractere) {
                    compteur++; // compter le nombre d'√©l√©ments √©gaux vers le bas
                }
                if (compteur >= 3) { // si on a trouv√© une s√©rie d'au moins 3 √©l√©ments √©gaux
                    for (int k = 0; k < compteur; k++) {
                        tab[i+k][j].variable=1; // remplacer les √©l√©ments par des "O"
                    }
                    veriftot=1;
                }
            }
        }        
    }
    return veriftot;
}

void DeplacerGauche(case_tableau tab[][20],int taille) {
    int i,j,k;
    bool verif=0;
    
    
    
    for (i = 0; i < taille; i++) {
        for (j = 0; j < taille; j++) {
            if (tab[i][j].variable == 1) {
                k = j;
                while (k > 0 && tab[i][k - 1].variable == 0) {
                    // √âchanger le caract√®re (avec son bool√©en pr√©c√©dent!!!!)
                    char tempCaractere = tab[i][k - 1].caractere;
                    int tempVariable = tab[i][k - 1].variable;
                    tab[i][k - 1].caractere = tab[i][k].caractere;
                    tab[i][k - 1].variable = tab[i][k].variable;
                    tab[i][k].caractere = tempCaractere;
                    tab[i][k].variable = tempVariable;
                    k--;
                }
            }
        }
    }


    

}


double remplacement(case_tableau tab[][20],int taille,int different,Score score){
    int i, j, k;
    bool verif=0;
    bool veriftot;
    int taille2;
    taille2=taille;
    
    
    
    
    do{             // remplacement de tout les caract√®res avec un bool√©en = 1 
        veriftot=detecteMarque(tab,taille2,veriftot); // v√©riftot ici sert √† d√©tecter si le programme detecteMarque change une variable d'un caract√®re 
        DeplacerGauche(tab,taille2);
        for(i=0;i<taille;i++){
            verif=0;
            for(k=0;k<taille;k++){ // G√©n√©ration al√©atoire des caract√®res
                if(tab[i][k].variable==1){
                    verif=1;
                    tab[i][k].caractere='A'+rand()%different; //  symboles diff√©rents choisi par l'utilisateur
                    tab[i][k].variable=0; // variable √† zero pour le compteur
                    score.score++;
                }
            }
        }
        
    }while(verif==1 || veriftot==1);    //le do while ici sert pour ne pas sortir de la boucle tant que un des deux bool√©ens est √©gale √† 1
    return score.score;
}
void echange(case_tableau tab[][20],int taille){
  int a1, b1, a2, b2;    //a1 : ligne de la 1√®re case √† √©changer et b1 : colonne de cette 1√®re case
                         // pareil pour a2 et b2
  a1=0;
  b1=0;
  a2=0;
  b2=0;
  int temp;
  int i, k;
  case_tableau tabcopie[20][20]; 
  bool veriftot;
  veriftot=0;
    for (i = 0; i < taille; i++) {
        for (k = 0; k < taille; k++) {
        tabcopie[i][k].caractere = tab[i][k].caractere;
        tabcopie[i][k].variable = tab[i][k].variable;
        }
    }
  
  //boucle pour recommencer apr√®s chaque √©change  
  int erreur=0; 
    char case1, case2;
do{
    
    do{  //pour v√©rifier l'inverse : on veut que les a et b soient compris entre 0 et _ inclus
      printf("\nDonnez les coordonn√©es de la 1√®re case : ligne, puis colonne\n"); 
      scanf("%d",&a1);
      scanf("%d",&b1);
    }while (a1<0 || a1>=taille || b1<0 || b1>=taille );
    case1=tabcopie[a1][b1].caractere;
    
    printf("case1: ");
    if(case1=='A'){
      printf(" üçê \n");
    }
    else if(case1=='B'){
      printf(" üçâ \n");
    }
    else if(case1=='C'){
      printf(" ü•ù \n");
    }
    else if(case1=='D'){
      printf(" üçá \n");               
    }
    else if(case1=='E'){
      printf(" üßÅ \n");
      //printf(PCOLOR("%d"),0);
    }
    else if(case1=='F'){
      printf(" ü•ï \n");
      //printf(PCOLOR("%d"),0);
    }


    do{
      printf("Donnez les coordonn√©es de la 2nd case : ligne, puis colonne\n");
      scanf("%d",&a2);
      scanf("%d",&b2);
    }while (a2<0 || a2>=taille || b2<0 || b2>=taille);
    case2=tabcopie[a2][b2].caractere;

    printf("case2: ");
    if(case2=='A'){
      printf(" üçê \n");
    }
    else if(case2=='B'){
      printf(" üçâ \n");
    }
    else if(case2=='C'){
      printf(" ü•ù \n");
    }
    else if(case2=='D'){
      printf(" üçá \n");               
    }
    else if(case2=='E'){
      printf(" üßÅ \n");
      //printf(PCOLOR("%d"),0);
    }
    else if(case2=='F'){
      printf(" ü•ï \n");
      //printf(PCOLOR("%d"),0);
    }





    
  if (((a1==a2)&&((b1==b2+1)||(b1==b2-1))) || ((b1==b2)&&((a1==a2+1)||(a1==a2-1)))){  //condition pour v√©rifier que les cases soient √† c√¥t√©s ou au-dessus/dessous
    printf("condition ok\n");
    case1=tabcopie[a2][b2].caractere;    //√©change de la case1 par la case2
    case2=tabcopie[a1][b1].caractere;    //pareil mais pour case2 par case1
    temp=tabcopie[a1][b1].caractere;
    tabcopie[a1][b1].caractere=tabcopie[a2][b2].caractere;
    tabcopie[a2][b2].caractere=temp;
    veriftot=detecteMarque(tabcopie, taille, veriftot);

    if(veriftot==1){
      printf("case1 √©chang√©e: ");
        if(case1=='A'){
          printf(" üçê \n");
        }
        else if(case1=='B'){
          printf(" üçâ \n");
        }
        else if(case1=='C'){
          printf(" ü•ù \n");
        }
        else if(case1=='D'){
          printf(" üçá \n");               
        }
        else if(case1=='E'){
          printf(" üßÅ \n");
          //printf(PCOLOR("%d"),0);
        }
        else if(case1=='F'){
          printf(" ü•ï \n");
          //printf(PCOLOR("%d"),0);
      }
    

      printf("case2 √©chang√©e: ");
        if(case2=='A'){
          printf(" üçê \n");
        }
        else if(case2=='B'){
          printf(" üçâ \n");
        }
        else if(case2=='C'){
          printf(" ü•ù \n");
        }
        else if(case2=='D'){
          printf(" üçá \n");               
        }
        else if(case2=='E'){
          printf(" üßÅ \n");
          //printf(PCOLOR("%d"),0);
        }
        else if(case2=='F'){
          printf(" ü•ï \n");
        //printf(PCOLOR("%d"),0);
        }
    
    }


    
    
  }
  else if((a1==a2)&&((b1==0 && b2==taille-1)||(b1==taille-1 && b2==0))){    //condition sp√©ciale o√π les 2 cases √† √©changer sont aux extr√™mit√©s de la m√™me ligne
    printf("ok ligne\n");  //pour v√©rifier cette codition
    case1=tabcopie[a2][b2].caractere;    //√©change de la case1 par la case2
    case2=tabcopie[a1][b1].caractere;    //pareil mais pour case2 par case1
    temp=tabcopie[a1][b1].caractere;
    tabcopie[a1][b1].caractere=tabcopie[a2][b2].caractere;
    tabcopie[a2][b2].caractere=temp;
    veriftot=detecteMarque(tabcopie, taille, veriftot);
if(veriftot==1){
      printf("case1 √©chang√©e: ");
        if(case1=='A'){
          printf(" üçê \n");
        }
        else if(case1=='B'){
          printf(" üçâ \n");
        }
        else if(case1=='C'){
          printf(" ü•ù \n");
        }
        else if(case1=='D'){
          printf(" üçá \n");               
        }
        else if(case1=='E'){
          printf(" üßÅ \n");
          //printf(PCOLOR("%d"),0);
        }
        else if(case1=='F'){
          printf(" ü•ï \n");
          //printf(PCOLOR("%d"),0);
      }
    

      printf("case2 √©chang√©e: ");
        if(case2=='A'){
          printf(" üçê \n");
        }
        else if(case2=='B'){
          printf(" üçâ \n");
        }
        else if(case2=='C'){
          printf(" ü•ù \n");
        }
        else if(case2=='D'){
          printf(" üçá \n");               
        }
        else if(case2=='E'){
          printf(" üßÅ \n");
          //printf(PCOLOR("%d"),0);
        }
        else if(case2=='F'){
          printf(" ü•ï \n");
        //printf(PCOLOR("%d"),0);
        }
    
    }



    
  }
  else if((b1==b2)&&((a1==0 && a2==taille-1)||(a1==taille-1 && a2==0))){ //condition sp√©ciale o√π les 2 cases √† √©changer sont aux extr√™mit√©s de la m√™me colonne
    printf("ok colonne\n");
    case1=tabcopie[a2][b2].caractere;    //√©change de la case1 par la case2
    case2=tabcopie[a1][b1].caractere;    //pareil mais pour case2 par case1
    temp=tabcopie[a1][b1].caractere;
    tabcopie[a1][b1].caractere=tabcopie[a2][b2].caractere;
    tabcopie[a2][b2].caractere=temp;
    veriftot=detecteMarque(tabcopie, taille, veriftot);
    if(veriftot==1){
      printf("case1 √©chang√©e: ");
        if(case1=='A'){
          printf(" üçê \n");
        }
        else if(case1=='B'){
          printf(" üçâ \n");
        }
        else if(case1=='C'){
          printf(" ü•ù \n");
        }
        else if(case1=='D'){
          printf(" üçá \n");               
        }
        else if(case1=='E'){
          printf(" üßÅ \n");
          //printf(PCOLOR("%d"),0);
        }
        else if(case1=='F'){
          printf(" ü•ï \n");
          //printf(PCOLOR("%d"),0);
      }
    

      printf("case2 √©chang√©e: ");
        if(case2=='A'){
          printf(" üçê \n");
        }
        else if(case2=='B'){
          printf(" üçâ \n");
        }
        else if(case2=='C'){
          printf(" ü•ù \n");
        }
        else if(case2=='D'){
          printf(" üçá \n");               
        }
        else if(case2=='E'){
          printf(" üßÅ \n");
          //printf(PCOLOR("%d"),0);
        }
        else if(case2=='F'){
          printf(" ü•ï \n");
        //printf(PCOLOR("%d"),0);
        }
    
    }
  }
if(veriftot==0){
  printf("L'√©change de cases ne cr√©√© pas de colonne ou de ligne de trois ou plus veuillez entrer un √©change correct");
}
}while(veriftot==0);  //v√©rifitot pour savoir si un alignement ligne/colonne de >=3 est ok
for (i = 0; i < taille; i++) {
    for (k = 0; k < taille; k++) {
    tab[i][k].caractere = tabcopie[i][k].caractere;
    tab[i][k].variable = tabcopie[i][k].variable;
    }
}


    
  


 

}


///////


bool d√©tectionblocage(case_tableau tab[][20],int taille){         //voir annexe des cas si besoin
    int i,j,k;
    bool verifblocage;
    verifblocage=1;
    for(i=0;i<taille;i++){
        for(j=0;j<taille;j++){
            if((tab[i][j].caractere==tab[i][j+1].caractere)&&(j>=2&&j<=taille-4&&i>=1&&i<=taille-2)){
                if(tab[i][j].caractere==tab[i][j-2].caractere||tab[i][j].caractere==tab[i-1][j-1].caractere||tab[i][j].caractere==tab[i+1][j-1].caractere||tab[i][j].caractere==tab[i][j+3].caractere||tab[i][j].caractere==tab[i-1][j+2].caractere||tab[i][j].caractere==tab[i+1][j+2].caractere){   //condition  pour le cas 1
                    return 0;    
                }
            }
            
            
            if(j==0){           //pour les doubles et simples sur la gauche         
                if(i>=1&&i<=taille-2){
                    if(tab[i][0].caractere==tab[i][taille-1].caractere){            
                        if(tab[i][0].caractere==tab[i][taille-3].caractere||tab[i][0].caractere==tab[i-1][taille-2].caractere||tab[i][0].caractere==tab[i+1][taille-2].caractere||tab[i][0].caractere==tab[i-1][1].caractere||tab[i][0].caractere==tab[i+1][1].caractere||tab[i][0].caractere==tab[i][2].caractere){            //cas 2
                            return 0;
                        }
                    }
                    if(tab[i][0].caractere==tab[i][1].caractere){                   
                        if(tab[i][0].caractere==tab[i][taille-2].caractere||tab[i][0].caractere==tab[i-1][taille-1].caractere||tab[i][0].caractere==tab[i+1][taille-1].caractere||tab[i][0].caractere==tab[i-1][2].caractere||tab[i][0].caractere==tab[i+1][2].caractere||tab[i][0].caractere==tab[i][3].caractere){    //cas 3
                            return 0;
                        }
                    }
                }
            }
            if(j==taille-2){      //pour les doubles sur la droite
                if(i>=1&&i<=taille-2){
                    if(tab[i][taille-2].caractere==tab[i][taille-1].caractere){            
                        if(tab[i][taille-2].caractere==tab[i][taille-4].caractere||tab[i][taille-2].caractere==tab[i-1][taille-3].caractere||tab[i][taille-2].caractere==tab[i+1][taille-3].caractere||tab[i][taille-2].caractere==tab[i-1][0].caractere||tab[i][taille-2].caractere==tab[i+1][0].caractere||tab[i][taille-2].caractere==tab[i][1].caractere){            //cas 4
                            return 0;
                        }
                    }
                }
            }
            //les quatres cot√©es du tableau pour alignement de deux en ligne
            
            
            if(i==0&&j==0){                                     //cas 5
                if(tab[0][0].caractere==tab[0][1].caractere){            
                    if(tab[0][0].caractere==tab[0][taille-2].caractere||tab[0][0].caractere==tab[taille-1][taille-1].caractere||tab[0][0].caractere==tab[1][taille-1].caractere||tab[0][0].caractere==tab[0][3].caractere||tab[0][0].caractere==tab[1][2].caractere||tab[0][0].caractere==tab[taille-1][2].caractere){    
                        return 0;
                    }
                }    
            }
            
            if(i==taille-1&&j==0){  //cas 6
                if(tab[taille-1][0].caractere==tab[taille-1][1].caractere){            
                    if(tab[taille-1][0].caractere==tab[taille-1][taille-2].caractere||tab[taille-1][0].caractere==tab[taille-2][taille-1].caractere||tab[taille-1][0].caractere==tab[0][taille-1].caractere||tab[taille-1][0].caractere==tab[taille-1][3].caractere||tab[taille-1][0].caractere==tab[taille-2][2].caractere||tab[taille-1][0].caractere==tab[0][2].caractere){    
                        return 0;
                    }
                }    
            }
            
            if(i==0&&j==taille-2){                                     //cas 7
                if(tab[0][taille-2].caractere==tab[0][taille-1].caractere){            
                    if(tab[0][taille-2].caractere==tab[0][taille-4].caractere||tab[0][taille-2].caractere==tab[taille-1][taille-3].caractere||tab[0][taille-2].caractere==tab[1][taille-3].caractere||tab[0][taille-2].caractere==tab[0][1].caractere||tab[0][taille-2].caractere==tab[1][0].caractere||tab[0][taille-2].caractere==tab[taille-1][0].caractere){        
                        return 0;
                    }
                }    
            }
            
            if(i==taille-1&&j==taille-2){                                       //cas 8
                if(tab[taille-1][taille-2].caractere==tab[taille-1][taille-1].caractere){            
                    if(tab[taille-1][taille-2].caractere==tab[0][0].caractere||tab[taille-1][taille-2].caractere==tab[taille-2][0].caractere||tab[taille-1][taille-2].caractere==tab[taille-1][1].caractere||tab[taille-1][taille-2].caractere==tab[taille-1][taille-4].caractere||tab[taille-1][taille-2].caractere==tab[taille-2][taille-3].caractere||tab[taille-1][taille-2].caractere==tab[0][taille-3].caractere){    
                        return 0;
                    }
                }
            
            }
            //cas pour le haut et le bas
            if(i==taille-1&&j==taille-1){           //cas 9      
                if(tab[taille-1][taille-1].caractere==tab[taille-1][0].caractere){            
                    if(tab[taille-1][taille-1].caractere==tab[taille-1][taille-3].caractere||tab[taille-1][taille-1].caractere==tab[taille-2][taille-2].caractere||tab[taille-1][taille-1].caractere==tab[0][taille-2].caractere||tab[taille-1][taille-1].caractere==tab[taille-1][2].caractere||tab[taille-1][taille-1].caractere==tab[taille-2][1].caractere||tab[taille-1][taille-1].caractere==tab[taille-2][1].caractere){ 
                        return 0;
                    } 
                }
            }
            
            if(i==0&&j==taille-1){           //cas 10      
                if(tab[0][0].caractere==tab[0][taille-1].caractere){            
                    if(tab[0][0].caractere==tab[0][taille-3].caractere||tab[0][0].caractere==tab[1][taille-2].caractere||tab[0][0].caractere==tab[taille-1][taille-2].caractere||tab[0][0].caractere==tab[0][2].caractere||tab[0][0].caractere==tab[taille-1][1].caractere||tab[0][0].caractere==tab[1][1].caractere){ 
                        return 0;
                    } 
                }
            }
            
            
            
                    //suite √† faire pour les colonnes
            
            
            if((tab[i][j].caractere==tab[i+1][j].caractere)&&(j>=1&&j<=taille-2&&i>=2&&i<=taille-4)){
                if(tab[i][j].caractere==tab[i-2][j].caractere||tab[i][j].caractere==tab[i-1][j-1].caractere||tab[i][j].caractere==tab[i-1][j+1].caractere||tab[i][j].caractere==tab[i+2][j-1].caractere||tab[i][j].caractere==tab[i+2][j+1].caractere||tab[i][j].caractere==tab[i+3][j].caractere){   //condition  pour le cas 11
                    return 0;
                }
            }

        
                    
            if(i==0){           //pour les doubles et simples sur la gauche         
                if(j>=1&&j<=taille-2){
                    if(tab[0][j].caractere==tab[taille-1][j].caractere){            
                        if(tab[0][j].caractere==tab[taille-3][j].caractere||tab[0][j].caractere==tab[taille-2][j-1].caractere||tab[0][j].caractere==tab[taille-2][j+1].caractere||tab[0][j].caractere==tab[1][j-1].caractere||tab[0][j].caractere==tab[1][j+1].caractere||tab[0][j].caractere==tab[2][j].caractere){            //cas 12
                            return 0;
                        } 
                    }
                    if(tab[0][j].caractere==tab[1][j].caractere){                   
                        if(tab[0][j].caractere==tab[taille-2][j].caractere||tab[0][j].caractere==tab[taille-1][j-1].caractere||tab[0][j].caractere==tab[taille-1][j+1].caractere||tab[0][j].caractere==tab[2][j-1].caractere||tab[0][j].caractere==tab[2][j+1].caractere||tab[0][j].caractere==tab[3][j].caractere){    //cas 13
                            return 0;
                        }
                    }
                }
            }
            if(i==taille-2){                        //cas 14 
                if(j>=1&&j<=taille-2){
                    if(tab[taille-2][j].caractere==tab[taille-1][j].caractere){            
                        if(tab[taille-2][j].caractere==tab[taille-4][j].caractere||tab[taille-2][j].caractere==tab[taille-3][j-1].caractere||tab[taille-2][j].caractere==tab[taille-3][j+1].caractere||tab[taille-2][j].caractere==tab[0][j-1].caractere||tab[taille-2][j].caractere==tab[0][j+1].caractere||tab[taille-2][j].caractere==tab[1][j].caractere){
                            return 0;
                        }
                    }
                }
            }
            if(i==0&&j==0){                             //cas 15
                if(tab[0][0].caractere==tab[1][0].caractere){            
                    if(tab[0][0].caractere==tab[taille-2][0].caractere||tab[0][0].caractere==tab[taille-1][1].caractere||tab[0][0].caractere==tab[taille-1][taille-1].caractere||tab[0][0].caractere==tab[3][0].caractere||tab[0][0].caractere==tab[2][1].caractere||tab[0][0].caractere==tab[2][taille-1].caractere){    
                        return 0;
                    }
                }
            }
            
            
            if(i==0&&j==taille-1){                  //cas 16
                if(tab[0][taille-1].caractere==tab[1][taille-1].caractere){            
                    if(tab[0][taille-1].caractere==tab[taille-2][taille-1].caractere||tab[0][taille-1].caractere==tab[taille-1][taille-2].caractere||tab[0][taille-1].caractere==tab[taille-1][0].caractere||tab[0][taille-1].caractere==tab[3][taille-1].caractere||tab[0][taille-1].caractere==tab[2][taille-2].caractere||tab[0][taille-1].caractere==tab[2][0].caractere){            
                        return 0;
                    }
                }
            }
            
            
            if(i==taille-2&&j==0){                  
                if(tab[taille-2][0].caractere==tab[taille-1][0].caractere){            //cas 17
                    if(tab[taille-2][0].caractere==tab[taille-4][0].caractere||tab[taille-2][0].caractere==tab[taille-3][1].caractere||tab[taille-2][0].caractere==tab[taille-3][taille-1].caractere||tab[taille-2][0].caractere==tab[0][1].caractere||tab[taille-2][0].caractere==tab[0][taille-1].caractere||tab[taille-2][0].caractere==tab[1][0].caractere){   
                        return 0;
                    }
                }
            }
            
            if(i==taille-2&&j==taille-1){                  
                if(tab[taille-2][taille-1].caractere==tab[taille-1][taille-1].caractere){          //cas 18  
                    if(tab[taille-2][taille-1].caractere==tab[taille-4][taille-1].caractere||tab[taille-2][taille-1].caractere==tab[taille-3][taille-2].caractere||tab[taille-2][taille-1].caractere==tab[taille-3][0].caractere||tab[taille-2][taille-1].caractere==tab[0][0].caractere||tab[taille-2][taille-1].caractere==tab[0][taille-2].caractere||tab[taille-2][taille-1].caractere==tab[1][taille-1].caractere){  
                        return 0;
                    }
                }
            }
            
            if(i==taille-1&&j==taille-1){                  
                if(tab[taille-1][taille-1].caractere==tab[0][taille-1].caractere){        //cas 19    
                    if(tab[taille-1][taille-1].caractere==tab[taille-3][taille-1].caractere||tab[taille-1][taille-1].caractere==tab[taille-2][taille-2].caractere||tab[taille-1][taille-1].caractere==tab[taille-2][0].caractere||tab[taille-1][taille-1].caractere==tab[1][0].caractere||tab[taille-1][taille-1].caractere==tab[1][taille-2].caractere||tab[taille-1][taille-1].caractere==tab[2][taille-1].caractere){         
                        return 0;
                    }
                }
            }
            
            if(i==0&&j==0){                  
                if(tab[0][0].caractere==tab[taille-1][0].caractere){     //cas 20       
                    if(tab[0][0].caractere==tab[taille-3][0].caractere||tab[0][0].caractere==tab[taille-2][taille-1].caractere||tab[0][0].caractere==tab[taille-2][1].caractere||tab[0][0].caractere==tab[1][1].caractere||tab[0][0].caractere==tab[1][taille-1].caractere||tab[0][0].caractere==tab[2][0].caractere){   
                        return 0;
                    }
                }
            }
            
        }
    }
    return 1;
}


void SaveScore(Score newScore){
  FILE *Scorefile = fopen("scores.txt", "a");  // Ouvre le fichier et fait des ajouts √† la fin (type "a")
    
    if (Scorefile == NULL) {
        printf("Erreur lors de l'ouverture du fichier.\n");
        
    } else {
        fprintf(Scorefile, "%ld\n", score.score);
        fclose(Scorefile);
        printf("Score sauvegard√© avec succ√®s.\n");
  }
}


void SaveHighScore(Score newscore) {
    FILE *Scorefile = fopen("scores.txt", "r");  // Ouvre le fichier en mode lecture
    
    if (Scorefile != NULL) {
        Score highScore;
        highScore.score = 0;  // Initialise le high score √† 0
        
        // Lit le fichier de scores pour trouver le high score actuel
        while (fscanf(Scorefile, "%s %ld", highScore.player, &highScore.score) != EOF) {
            if (newscore.score > highScore.score) {
                highScore.score = newscore.score;
                strcpy(highScore.player, newscore.player);
                printf("Nouveau meilleur score !\n");
            }
        }
        
        fclose(Scorefile);
        
        Scorefile = fopen("scores.txt", "w");  // Ouvre le fichier en mode √©criture (√©crase le contenu existant)
        
        if (Scorefile != NULL) {
            fprintf(Scorefile, "%s %ld\n", highScore.player, highScore.score);
            fclose(Scorefile);
        } else {
            printf("Erreur lors de l'ouverture du fichier.\n");
        }
    } else {
        printf("Erreur lors de l'ouverture du fichier.\n");
    }
}



void auto_save(int taille, int different, case_tableau tab[][20]) {
  
  FILE* save = fopen("save_file.txt", "w");               // Ouverture du fichier de sauvegarde en mode √©criture
    if (save == NULL) {                                      // Message erreur si aucun fichier de sauvegarde d√©tect√©
    printf("Erreur : Probl√®me pour ouvrir la sauvegarde");
    //fprintf(save, "Score : %ld\n", score);
    }

  fprintf(save, "Tab size : %d\n", taille);
  fprintf(save, "Nbr of different(s) possible symbols : %d\n", different);
  
  
  for (int i=0; i < taille; i++) {
    for (int k=0; k < taille; k++) {
      
      fprintf(save, "%c", tab[i][k].caractere);
    }
  
  }

  fclose(save);               // Fermeture du fichier une fois √©criture termin√©e
  printf("\x1b[32mSauvegarde effectu√©e avec succ√®s !\n");
  printf(PCOLOR("%d"), 0);
}


void load_save() {
   int taille, different;
  bool verifblocage;
  //long high_score;
  
  
  case_tableau tab[20][20]; // D√©finition du tableau
  
  FILE* save = fopen("save_file.txt", "r");               // Ouverture du fichier de sauvegarde en mode lecture
  if (save == NULL) {                                      // Message erreur si aucun fichier de sauvegarde d√©tect√©
    printf("Erreur : Probl√®me pour ouvrir la sauvegarde");
    return;
  }


  fscanf(save, "Tab size : %d\n", &taille);
  fscanf(save, "Nbr of different(s) possible symbols : %d\n", &different);
  //fscanf(save, "High-Score : %ld\n", &high_score);
  //fscanf(save, "Score : %ld\n", &score);
  


  for (int i=0; i < taille; i++) {
    for (int k=0; k < taille; k++) {
      
      fscanf(save, "%c", &tab[i][k].caractere);     // √âcriture du tableau dans le fichier sauvegarde
    }
  }

  fclose(save);   // Fermeture du fichier une fois √©criture termin√©e
}



///////////////////////////////////////////////////////////////////////////////////



void resume_game() {
  int taille, different;
  bool verifblocage;
  
  
  
  case_tableau tab[20][20]; // D√©finition du tableau

printf("Votre score est de : %ld \n",score.score);

  FILE* save = fopen("save_file.txt", "r");               // Ouverture du fichier de sauvegarde en mode lecture
  if (save == NULL) {                                      // Message erreur si aucun fichier de sauvegarde d√©tect√©
    printf("Erreur : Probl√®me pour ouvrir la sauvegarde");
    return;
  }


  fscanf(save, "Tab size : %d\n", &taille);
  fscanf(save, "Nbr of different(s) possible symbols : %d\n", &different);
  //fscanf(save, "High-Score : %ld\n", &high_score);
  //fscanf(save, "Score : %ld\n", &score);
  


  for (int i=0; i < taille; i++) {
    for (int k=0; k < taille; k++) {
      
      fscanf(save, "%c", &tab[i][k].caractere);     // Lecture des donn√©es du tableau dans le fichier sauvegarde
    }
  }

  fclose(save);   // Fermeture du fichier une fois √©criture termin√©e
  
  Affichagemoji(tab, taille);        //d√©but du jeu
  remplacement(tab, taille, different, score);
  SaveScore(score);
  SaveHighScore(score);
      do{ 
    //load_save():
    printf("Votre score est de : %ld \n",score.score);
    auto_save(taille, different, tab);
    
  
    
    printf("Votre score est de : %ld \n",score.score);                                     
    Affichagemoji(tab, taille);        
    echange(tab,taille);            //√©change
    score.score=remplacement(tab, taille,different,score);
    verifblocage=d√©tectionblocage(tab,taille);
    auto_save(taille, different, tab);
    SaveScore(score);
    SaveHighScore(score);
    
    }while(verifblocage==0);
    Affichagemoji(tab, taille);
    printf("c'est termin√© plus aucun mouvement n'est possible\nvotre score final est de %ld",score.score);
}



    

void setting_parameters() {
  int taille, different;
  bool verifblocage;
  Score score;
  //long high_score;
 
  
  
    do {
        printf("Entrez la taille du tableau (entre 5 et 20) : ");
        scanf("%d", &taille);
    } while (taille < 5 || taille > 20);
    
    do {
        printf("Entrez le nombre de forme diff√©rentes (entre 4 et 6) : ");
        scanf("%d", &different);
    } while (different < 4 || different > 6);
    
    case_tableau tab[20][20]; // D√©finition du tableau
    
    srand(time(NULL)); // G√©n√©ration al√©atoire
    
    int i, k;
    for (i = 0; i < taille; i++) {
        for (k = 0; k < taille; k++) {
        // G√©n√©ration al√©atoire des caract√®res
        tab[i][k].caractere = 'A' + rand() % different; //  symboles diff√©rents choisit lors du scanf
        tab[i][k].variable = 0; // variable √† z√©ro pour le compteur
      }
    }
    Affichagemoji(tab, taille);        //d√©but du jeu
    remplacement(tab, taille, different, score);
    score.score=0;

      do{ 
    auto_save(taille, different, tab);
    SaveScore(score);
    SaveHighScore(score);
  
      
    printf("Votre score est de : %ld \n",score.score);                                     
    Affichagemoji(tab, taille);        
    echange(tab,taille);            //√©change
    score.score=remplacement(tab, taille,different,score);
    verifblocage=d√©tectionblocage(tab,taille);
    auto_save(taille, different, tab);
    SaveScore(score);
    SaveHighScore(score);
    
    }while(verifblocage==0);
    Affichagemoji(tab, taille);
    printf("c'est termin√© plus aucun mouvement n'est possible\nvotre score final est de %ld",score.score);
}

////////////////////////////////////////////////////////////////////////////////////////////




void Home_menu(){
    
  char selection=0;                      // Valeur n√©cessaire pour rentrer dans la boucle while
  
  printf("\x1b[34m----------------------------------\n");
  printf("\x1b[34m--------------------------------\n");
  printf("\n");

  printf("\x1b[32mBienvenue sur CY - Crush ! :D\n ");        // Message d'accueil
  
  printf("\n");
  printf("\x1b[34m--------------------------------\n");  
  printf("\x1b[34m----------------------------------\n");
  printf(PCOLOR("%d"),0);

  printf("\n \n");

  printf("\x1b[32m1." "\x1B[36mNouvelle partie\n\n");               // Interface Menu muni de 4 options
  printf("\x1b[32m2." "\x1B[36mReprendre\n\n");
  printf("\x1b[32m3." "\x1B[36mCr√©dits\n\n");
  printf("\x1B[31m4. Quitter le jeu\n\n\n");
  printf(PCOLOR("%d"),0);
  
  
 // while (selection<1 || selection>4) {

  do{
    
    printf("\x1B[33mVeuillez entrer" "\x1B[32m [1]" "\x1B[33m," " \x1B[32m[2]" "\x1B[33," "\x1B[32m [3]" "\x1B[33m ou " "\x1B[31m[4]" "\x1B[33m :\n" );         // Demande √† l'utilisateur de faire son choix
    printf(PCOLOR("%d"),0);
    scanf("%s", &selection);              // R√©cuperation de la r√©ponse du joueur
    if (selection=='1'){
      
      printf("\x1B[33mC'est parti pour une nouvelle aventure ! \n");     // Lancement d'une nouvelle sauvegarde
      printf(PCOLOR("%d"),0);
      setting_parameters();
    }

    else if (selection=='2') {
      
      printf("\x1B[33mHeureux de te retrouver, on est reparti !\n" );      // Lancement d'une sauvegarde pr√©c√©dente
      printf(PCOLOR("%d"),0);
      resume_game();
    }

    else if (selection=='3') {
      
      printf("\x1B[33mCy Crush par :\n\n\n" "\x1B[34mBLUTEAU Corentin\n\n" "\x1B[32mLY Athyna\n\n" "\x1B[36mANDRIANAVALONA Timoth√©\n\n");                   // Affichage des cr√©dits
      printf(PCOLOR("%d"),0);
      selection=5;                                   // Retour au d√©but de la boucle, redemande choix du joueur

      
    }

    else if (selection=='4') {
      
      printf("\x1B[33mSalut, j'esp√®re qu'on se reverra tr√®s bient√¥t ! :D\n");     // message d'au revoir, sayonara !
      printf(PCOLOR("%d"),0);
      exit(0);
    }

    else {
      
      printf("\x1B[31mVeuillez r√©essayer x(\n");    // Valeur entr√©e non valide --> retour au d√©but de la boucle
      printf(PCOLOR("%d"),0);
    }
  }while ((selection!= '4') || (selection!= '3') || (selection!= '2') || (selection!= 1));

}




    





int main() {

  Home_menu();

return 0;
}













  
